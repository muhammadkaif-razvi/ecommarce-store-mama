generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  phonenumber           String?                @unique
  phoneNumberVerified   DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  cart      Cart?     @relation
  cartId    String?   @unique
}


model Cart {
  id        String    @id @default(uuid())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[] @relation("CartToCartItem")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation("CartToCartItem", fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  variantId String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, variantId])
}








model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PhoneNumberVerificationToken {
  id          String   @id @default(uuid())
  phonenumber String   @unique
  token       String
  expires     DateTime

  @@unique([phonenumber, token])
}

model ResetPasswordEmailToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordPhoneToken {
  id          String   @id @default(cuid())
  phonenumber String
  token       String   @unique
  expires     DateTime

  @@unique([phonenumber, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}
